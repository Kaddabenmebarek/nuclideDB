package org.research.kadda.nuclide.entity;
// Generated Apr 29, 2019 9:26:57 AM by Hibernate Tools 5.2.12.Final

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;

/**
 * NuclideBottle generated by hbm2java
 */
@Entity
@Table(name = "NUCLIDE_BOTTLE", schema = "OSIRIS")
@Audited
@SequenceGenerator(name="nuclide_bottle_seq", sequenceName="osiris.nuclide_bottle_seq_id", allocationSize=1)
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class NuclideBottle implements java.io.Serializable {

	private static final long serialVersionUID = -5981953516967606059L;
	private int nuclideBottleId;
	private Nuclide nuclide;
	private NuclideUser nuclideUserByNuclideUserId;
	private NuclideUser nuclideUserByDisposalUserId;
	private String substanceName;
	private Double activity;
	private Double volume;
	private String location;
	private Date activityDate;
	private Date disposalDate;
	private char isLiquid;
	private String batchName;
	private Set<NuclideUsage> nuclideUsages = new HashSet<NuclideUsage>(0);
	private Set<NuclideAttached> nuclideAttacheds = new HashSet<NuclideAttached>(0);
	private BigDecimal sumVolume;
	private Double currentActivity;
	private NuclideTracerType tracerType;

	public NuclideBottle() {
	}

	public NuclideBottle(Nuclide nuclide, NuclideUser nuclideUserByNuclideUserId,
			String substanceName, double activity, double volume, String location, Date activityDate, char isLiquid) {
		this.nuclide = nuclide;
		this.nuclideUserByNuclideUserId = nuclideUserByNuclideUserId;
		this.substanceName = substanceName;
		this.activity = activity;
		this.volume = volume;
		this.location = location;
		this.activityDate = activityDate;
		this.isLiquid = isLiquid;
	}

	public NuclideBottle(Nuclide nuclide, NuclideUser nuclideUserByNuclideUserId,
			NuclideUser nuclideUserByDisposalUserId, String substanceName, double activity, double volume,
			String location, Date activityDate, Date disposalDate, char isLiquid, String batchName,
			Set<NuclideUsage> nuclideUsages, Set<NuclideAttached> nuclideAttacheds) {
		this.nuclide = nuclide;
		this.nuclideUserByNuclideUserId = nuclideUserByNuclideUserId;
		this.nuclideUserByDisposalUserId = nuclideUserByDisposalUserId;
		this.substanceName = substanceName;
		this.activity = activity;
		this.volume = volume;
		this.location = location;
		this.activityDate = activityDate;
		this.disposalDate = disposalDate;
		this.isLiquid = isLiquid;
		this.batchName = batchName;
		this.nuclideUsages = nuclideUsages;
		this.nuclideAttacheds = nuclideAttacheds;
	}

	@Id
	@Column(name = "NUCLIDE_BOTTLE_ID", unique = true, nullable = false, precision = 8, scale = 0)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator="nuclide_bottle_seq")
	public int getNuclideBottleId() {
		return this.nuclideBottleId;
	}

	public void setNuclideBottleId(int nuclideBottleId) {
		this.nuclideBottleId = nuclideBottleId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "NUCLIDE_NAME", nullable = false)
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	public Nuclide getNuclide() {
		return this.nuclide;
	}

	public void setNuclide(Nuclide nuclide) {
		this.nuclide = nuclide;
	}

	@ManyToOne(fetch = FetchType.EAGER,cascade=CascadeType.MERGE)
	@JoinColumn(name = "NUCLIDE_USER_ID", nullable = false)
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	public NuclideUser getNuclideUserByNuclideUserId() {
		return this.nuclideUserByNuclideUserId;
	}

	public void setNuclideUserByNuclideUserId(NuclideUser nuclideUserByNuclideUserId) {
		this.nuclideUserByNuclideUserId = nuclideUserByNuclideUserId;
	}
	
	@ManyToOne(fetch = FetchType.LAZY,cascade=CascadeType.MERGE)
	@JoinColumn(name = "DISPOSAL_USER_ID")
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	public NuclideUser getNuclideUserByDisposalUserId() {
		return this.nuclideUserByDisposalUserId;
	}

	public void setNuclideUserByDisposalUserId(NuclideUser nuclideUserByDisposalUserId) {
		this.nuclideUserByDisposalUserId = nuclideUserByDisposalUserId;
	}

	@Column(name = "SUBSTANCE_NAME", nullable = false, length = 32)
	public String getSubstanceName() {
		return this.substanceName;
	}

	public void setSubstanceName(String substanceName) {
		this.substanceName = substanceName;
	}

	@Column(name = "ACTIVITY", nullable = false, precision = 126, scale = 0)
	public Double getActivity() {
		return this.activity;
	}

	public void setActivity(double activity) {
		this.activity = activity;
	}

	@Column(name = "VOLUME", nullable = false, precision = 126, scale = 0)
	public Double getVolume() {
		return this.volume;
	}

	public void setVolume(double volume) {
		this.volume = volume;
	}

	@Column(name = "LOCATION", nullable = false, length = 32)
	public String getLocation() {
		return this.location;
	}

	public void setLocation(String location) {
		this.location = location;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "ACTIVITY_DATE", nullable = false, length = 7)
	public Date getActivityDate() {
		return this.activityDate;
	}

	public void setActivityDate(Date activityDate) {
		this.activityDate = activityDate;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DISPOSAL_DATE", length = 7)
	public Date getDisposalDate() {
		return this.disposalDate;
	}

	public void setDisposalDate(Date disposalDate) {
		this.disposalDate = disposalDate;
	}

	@Column(name = "IS_LIQUID", nullable = false, length = 1)
	public char getIsLiquid() {
		return this.isLiquid;
	}

	public void setIsLiquid(char isLiquid) {
		this.isLiquid = isLiquid;
	}

	@Column(name = "BATCH_NAME", length = 32)
	public String getBatchName() {
		return this.batchName;
	}

	public void setBatchName(String batchName) {
		this.batchName = batchName;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "nuclideBottle")
	@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	public Set<NuclideUsage> getNuclideUsages() {
		return this.nuclideUsages;
	}

	public void setNuclideUsages(Set<NuclideUsage> nuclideUsages) {
		this.nuclideUsages = nuclideUsages;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "nuclideBottle")
	@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	public Set<NuclideAttached> getNuclideAttacheds() {
		return this.nuclideAttacheds;
	}

	public void setNuclideAttacheds(Set<NuclideAttached> nuclideAttacheds) {
		this.nuclideAttacheds = nuclideAttacheds;
	}

	@Transient
	public BigDecimal getSumVolume() {
		return sumVolume;
	}

	public void setSumVolume(BigDecimal sumVolume) {
		this.sumVolume = sumVolume;
	}

	@Transient
	public Double getCurrentActivity() {
		return currentActivity;
	}

	public void setCurrentActivity(Double currentActivity) {
		this.currentActivity = currentActivity;
	}	

	
	@ManyToOne(fetch = FetchType.LAZY,cascade=CascadeType.MERGE)
	@JoinColumn(name = "TRACER_TYPE_ID", nullable = false)
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	public NuclideTracerType getTracerType() {
		return tracerType;
	}

	public void setTracerType(NuclideTracerType tracerType) {
		this.tracerType = tracerType;
	}
	
}
