package org.research.kadda.nuclide.entity;
// Generated Apr 29, 2019 9:26:57 AM by Hibernate Tools 5.2.12.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.envers.Audited;
import org.hibernate.envers.RelationTargetAuditMode;

/**
 * NuclideWaste generated by hbm2java
 */
@Entity
@Table(name = "NUCLIDE_WASTE", schema = "OSIRIS")
@Audited
@SequenceGenerator(name="nuclide_waste_seq", sequenceName="osiris.nuclide_waste_seq_id", allocationSize=1)
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class NuclideWaste implements java.io.Serializable {

	private static final long serialVersionUID = -5101151766248026498L;
	private int nuclideWasteId;
	private Nuclide nuclide;
	private NuclideUser nuclideUserByDisposalUserId;
	private NuclideUser nuclideUserByClosureUserId;
	private NuclideUser nuclideUserByCreationUserId;
	private char isLiquid;
	private String location;
	private Date closureDate;
	private String closureStrDate;
	private String disposalRoute;
	private Double disposalActivity;
	private Date disposalDate;
	private Set<NuclideUsage> nuclideUsagesForSolidWasteId = new HashSet<NuclideUsage>(0);
	private Set<NuclideUsage> nuclideUsagesForLiquidWasteId = new HashSet<NuclideUsage>(0);

	public NuclideWaste() {
	}

	public NuclideWaste(Nuclide nuclide, NuclideUser nuclideUserByCreationUserId, char isLiquid,
			String location) {
		this.nuclide = nuclide;
		this.nuclideUserByCreationUserId = nuclideUserByCreationUserId;
		this.isLiquid = isLiquid;
		this.location = location;
	}

	public NuclideWaste(Nuclide nuclide, NuclideUser nuclideUserByDisposalUserId,
			NuclideUser nuclideUserByClosureUserId, NuclideUser nuclideUserByCreationUserId, char isLiquid,
			String location, Date closureDate, String disposalRoute, Double disposalActivity, Date disposalDate,
			Set<NuclideUsage> nuclideUsagesForSolidWasteId, Set<NuclideUsage> nuclideUsagesForLiquidWasteId) {
		this.nuclide = nuclide;
		this.nuclideUserByDisposalUserId = nuclideUserByDisposalUserId;
		this.nuclideUserByClosureUserId = nuclideUserByClosureUserId;
		this.nuclideUserByCreationUserId = nuclideUserByCreationUserId;
		this.isLiquid = isLiquid;
		this.location = location;
		this.closureDate = closureDate;
		this.disposalRoute = disposalRoute;
		this.disposalActivity = disposalActivity;
		this.disposalDate = disposalDate;
		this.nuclideUsagesForSolidWasteId = nuclideUsagesForSolidWasteId;
		this.nuclideUsagesForLiquidWasteId = nuclideUsagesForLiquidWasteId;
	}

	@Id
	@Column(name = "NUCLIDE_WASTE_ID", unique = true, nullable = false, precision = 8, scale = 0)
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator="nuclide_waste_seq")
	public int getNuclideWasteId() {
		return this.nuclideWasteId;
	}

	public void setNuclideWasteId(int nuclideWasteId) {
		this.nuclideWasteId = nuclideWasteId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "NUCLIDE_NAME", nullable = false)
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	public Nuclide getNuclide() {
		return this.nuclide;
	}

	public void setNuclide(Nuclide nuclide) {
		this.nuclide = nuclide;
	}

	@ManyToOne(fetch = FetchType.EAGER,cascade=CascadeType.MERGE)
	@JoinColumn(name = "DISPOSAL_USER_ID")
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	public NuclideUser getNuclideUserByDisposalUserId() {
		return this.nuclideUserByDisposalUserId;
	}

	public void setNuclideUserByDisposalUserId(NuclideUser nuclideUserByDisposalUserId) {
		this.nuclideUserByDisposalUserId = nuclideUserByDisposalUserId;
	}

	@ManyToOne(fetch = FetchType.EAGER,cascade=CascadeType.MERGE)
	@JoinColumn(name = "CLOSURE_USER_ID")
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	public NuclideUser getNuclideUserByClosureUserId() {
		return this.nuclideUserByClosureUserId;
	}

	public void setNuclideUserByClosureUserId(NuclideUser nuclideUserByClosureUserId) {
		this.nuclideUserByClosureUserId = nuclideUserByClosureUserId;
	}

	@ManyToOne(fetch = FetchType.EAGER,cascade=CascadeType.MERGE)
	@JoinColumn(name = "CREATION_USER_ID", nullable = false)
	@Audited(targetAuditMode = RelationTargetAuditMode.NOT_AUDITED)
	public NuclideUser getNuclideUserByCreationUserId() {
		return this.nuclideUserByCreationUserId;
	}

	public void setNuclideUserByCreationUserId(NuclideUser nuclideUserByCreationUserId) {
		this.nuclideUserByCreationUserId = nuclideUserByCreationUserId;
	}

	@Column(name = "IS_LIQUID", nullable = false, length = 1)
	public char getIsLiquid() {
		return this.isLiquid;
	}

	public void setIsLiquid(char isLiquid) {
		this.isLiquid = isLiquid;
	}

	@Column(name = "LOCATION", nullable = false, length = 32)
	public String getLocation() {
		return this.location;
	}

	public void setLocation(String location) {
		this.location = location;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "CLOSURE_DATE", length = 7)
	public Date getClosureDate() {
		return this.closureDate;
	}

	public void setClosureDate(Date closureDate) {
		this.closureDate = closureDate;
	}

	@Column(name = "DISPOSAL_ROUTE", length = 32)
	public String getDisposalRoute() {
		return this.disposalRoute;
	}

	public void setDisposalRoute(String disposalRoute) {
		this.disposalRoute = disposalRoute;
	}

	@Column(name = "DISPOSAL_ACTIVITY", precision = 126, scale = 0)
	public Double getDisposalActivity() {
		return this.disposalActivity;
	}

	public void setDisposalActivity(Double disposalActivity) {
		this.disposalActivity = disposalActivity;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DISPOSAL_DATE", length = 7)
	public Date getDisposalDate() {
		return this.disposalDate;
	}

	public void setDisposalDate(Date disposalDate) {
		this.disposalDate = disposalDate;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "nuclideWasteBySolidWasteId")
	@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	public Set<NuclideUsage> getNuclideUsagesForSolidWasteId() {
		return this.nuclideUsagesForSolidWasteId;
	}

	public void setNuclideUsagesForSolidWasteId(Set<NuclideUsage> nuclideUsagesForSolidWasteId) {
		this.nuclideUsagesForSolidWasteId = nuclideUsagesForSolidWasteId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "nuclideWasteByLiquidWasteId")
	@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	public Set<NuclideUsage> getNuclideUsagesForLiquidWasteId() {
		return this.nuclideUsagesForLiquidWasteId;
	}

	public void setNuclideUsagesForLiquidWasteId(Set<NuclideUsage> nuclideUsagesForLiquidWasteId) {
		this.nuclideUsagesForLiquidWasteId = nuclideUsagesForLiquidWasteId;
	}

	@Transient
	public String getClosureStrDate() {
		return closureStrDate;
	}

	public void setClosureStrDate(String closureStrDate) {
		this.closureStrDate = closureStrDate;
	}
}
