package org.research.kadda.nuclide.entity;
// Generated May 12, 2022, 1:22:21 PM by Hibernate Tools 5.2.12.Final

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

/**
 * NuclideLocationType generated by hbm2java
 */
@Entity
@Table(name = "NUCLIDE_LOCATION_TYPE", schema = "OSIRIS")
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class NuclideLocationType implements java.io.Serializable {

	private static final long serialVersionUID = -5811541081942877470L;
	private String locationType;
	private Set<NuclideLocation> nuclideLocations = new HashSet<NuclideLocation>(0);

	public NuclideLocationType() {
	}

	public NuclideLocationType(String locationType) {
		this.locationType = locationType;
	}

	public NuclideLocationType(String locationType, Set<NuclideLocation> nuclideLocations) {
		this.locationType = locationType;
		this.nuclideLocations = nuclideLocations;
	}

	@Id
	@Column(name = "LOCATION_TYPE", unique = true, nullable = false, length = 16)
	public String getLocationType() {
		return this.locationType;
	}

	public void setLocationType(String locationType) {
		this.locationType = locationType;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "nuclideLocationType")
	@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	public Set<NuclideLocation> getNuclideLocations() {
		return this.nuclideLocations;
	}

	public void setNuclideLocations(Set<NuclideLocation> nuclideLocations) {
		this.nuclideLocations = nuclideLocations;
	}

}
