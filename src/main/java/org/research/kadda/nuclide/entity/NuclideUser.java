package org.research.kadda.nuclide.entity;
// Generated Apr 29, 2019 9:26:57 AM by Hibernate Tools 5.2.12.Final

import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
import org.hibernate.envers.Audited;

/**
 * NuclideUser generated by hbm2java
 */
@Entity
@Table(name = "NUCLIDE_USER", schema = "OSIRIS")
@Audited
@Cache(usage = CacheConcurrencyStrategy.READ_WRITE)
public class NuclideUser implements java.io.Serializable {

	private static final long serialVersionUID = -7707281434390584212L;
	private String userId;
	private String firstName;
	private String lastName;
	private char isActive;
	private String role;
	private Set<NuclideBottle> nuclideBottlesForNuclideUserId = new HashSet<NuclideBottle>(0);
	private Set<NuclideWaste> nuclideWastesForDisposalUserId = new HashSet<NuclideWaste>(0);
	private Set<NuclideBottle> nuclideBottlesForDisposalUserId = new HashSet<NuclideBottle>(0);
	private Set<NuclideWaste> nuclideWastesForClosureUserId = new HashSet<NuclideWaste>(0);
	private Set<NuclideUsage> nuclideUsages = new HashSet<NuclideUsage>(0);
	private Set<NuclideWaste> nuclideWastesForCreationUserId = new HashSet<NuclideWaste>(0);
	private Set<NuclideAttached> nuclideAttacheds = new HashSet<NuclideAttached>(0);

	public NuclideUser() {
	}

	public NuclideUser(String userId) {
		this.userId = userId;
	}	
	
	public NuclideUser(String userId, String firstName, String lastName, char isActive) {
		this.userId = userId;
		this.firstName = firstName;
		this.lastName = lastName;
		this.isActive = isActive;
	}

	public NuclideUser(String userId, String firstName, String lastName, char isActive,
			Set<NuclideBottle> nuclideBottlesForNuclideUserId, Set<NuclideWaste> nuclideWastesForDisposalUserId,
			Set<NuclideBottle> nuclideBottlesForDisposalUserId, Set<NuclideWaste> nuclideWastesForClosureUserId,
			Set<NuclideUsage> nuclideUsages, Set<NuclideWaste> nuclideWastesForCreationUserId,
			Set<NuclideAttached> nuclideAttacheds) {
		this.userId = userId;
		this.firstName = firstName;
		this.lastName = lastName;
		this.isActive = isActive;
		this.nuclideBottlesForNuclideUserId = nuclideBottlesForNuclideUserId;
		this.nuclideWastesForDisposalUserId = nuclideWastesForDisposalUserId;
		this.nuclideBottlesForDisposalUserId = nuclideBottlesForDisposalUserId;
		this.nuclideWastesForClosureUserId = nuclideWastesForClosureUserId;
		this.nuclideUsages = nuclideUsages;
		this.nuclideWastesForCreationUserId = nuclideWastesForCreationUserId;
		this.nuclideAttacheds = nuclideAttacheds;
	}

	@Id
	@Column(name = "USER_ID", unique = true, nullable = false, length = 8)
	public String getUserId() {
		return this.userId;
	}

	public void setUserId(String userId) {
		this.userId = userId;
	}

	@Column(name = "FIRST_NAME", nullable = false, length = 32)
	public String getFirstName() {
		return this.firstName;
	}

	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}

	@Column(name = "LAST_NAME", nullable = false, length = 32)
	public String getLastName() {
		return this.lastName;
	}

	public void setLastName(String lastName) {
		this.lastName = lastName;
	}

	@Column(name = "IS_ACTIVE", nullable = false, length = 1)
	public char getIsActive() {
		return this.isActive;
	}

	public void setIsActive(char isActive) {
		this.isActive = isActive;
	}
	
	@Column(name = "ROLE", nullable = true, length = 32)
	public String getRole() {
		return role;
	}

	public void setRole(String role) {
		this.role = role;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "nuclideUserByNuclideUserId")
	@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	public Set<NuclideBottle> getNuclideBottlesForNuclideUserId() {
		return this.nuclideBottlesForNuclideUserId;
	}

	public void setNuclideBottlesForNuclideUserId(Set<NuclideBottle> nuclideBottlesForNuclideUserId) {
		this.nuclideBottlesForNuclideUserId = nuclideBottlesForNuclideUserId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "nuclideUserByDisposalUserId")
	@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	public Set<NuclideWaste> getNuclideWastesForDisposalUserId() {
		return this.nuclideWastesForDisposalUserId;
	}

	public void setNuclideWastesForDisposalUserId(Set<NuclideWaste> nuclideWastesForDisposalUserId) {
		this.nuclideWastesForDisposalUserId = nuclideWastesForDisposalUserId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "nuclideUserByDisposalUserId")
	@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	public Set<NuclideBottle> getNuclideBottlesForDisposalUserId() {
		return this.nuclideBottlesForDisposalUserId;
	}

	public void setNuclideBottlesForDisposalUserId(Set<NuclideBottle> nuclideBottlesForDisposalUserId) {
		this.nuclideBottlesForDisposalUserId = nuclideBottlesForDisposalUserId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "nuclideUserByClosureUserId")
	@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	public Set<NuclideWaste> getNuclideWastesForClosureUserId() {
		return this.nuclideWastesForClosureUserId;
	}

	public void setNuclideWastesForClosureUserId(Set<NuclideWaste> nuclideWastesForClosureUserId) {
		this.nuclideWastesForClosureUserId = nuclideWastesForClosureUserId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "nuclideUser")
	@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	public Set<NuclideUsage> getNuclideUsages() {
		return this.nuclideUsages;
	}

	public void setNuclideUsages(Set<NuclideUsage> nuclideUsages) {
		this.nuclideUsages = nuclideUsages;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "nuclideUserByCreationUserId")
	@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	public Set<NuclideWaste> getNuclideWastesForCreationUserId() {
		return this.nuclideWastesForCreationUserId;
	}

	public void setNuclideWastesForCreationUserId(Set<NuclideWaste> nuclideWastesForCreationUserId) {
		this.nuclideWastesForCreationUserId = nuclideWastesForCreationUserId;
	}
	
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "nuclideUser")
	@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)
	public Set<NuclideAttached> getNuclideAttacheds() {
		return this.nuclideAttacheds;
	}

	public void setNuclideAttacheds(Set<NuclideAttached> nuclideAttacheds) {
		this.nuclideAttacheds = nuclideAttacheds;
	}	
	
	@Override
	public String toString() {
		return this.userId + "/ " +this.firstName + " " + this.lastName + "/ " + this.isActive;
	}

}
